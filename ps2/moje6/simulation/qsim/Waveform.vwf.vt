// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/07/2019 08:47:30"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mux_4_1_1_bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_4_1_1_bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg S0;
reg S1;
reg u;
reg v;
reg w;
reg x;
// wires                                               
wire m;

// assign statements (if any)                          
mux_4_1_1_bit i1 (
// port map - connection between master ports and signals/registers   
	.S0(S0),
	.S1(S1),
	.m(m),
	.u(u),
	.v(v),
	.w(w),
	.x(x)
);
initial 
begin 
#320000 $finish;
end 

// S0
always
begin
	S0 = 1'b0;
	S0 = #5000 1'b1;
	#5000;
end 

// S1
always
begin
	S1 = 1'b0;
	S1 = #10000 1'b1;
	#10000;
end 

// u
always
begin
	u = 1'b0;
	u = #20000 1'b1;
	#20000;
end 

// v
always
begin
	v = 1'b0;
	v = #40000 1'b1;
	#40000;
end 

// w
always
begin
	w = 1'b0;
	w = #80000 1'b1;
	#80000;
end 

// x
always
begin
	x = 1'b0;
	x = #160000 1'b1;
	#160000;
end 
endmodule

